package inversiondedependencias;

public class ReportesGenerador {

    private final Generador generador;

    public ReportesGenerador(Generador generador) {
        this.generador = generador;
    }

    public void generar() {
        generador.exportar();
    }
    /*

    private final PdfGenerador pdfGenerador;   // PRIMERA DEPENDENCIA

    private final CsvGenerador csvGenerador;     // SEGUNDA DEPENDENCIA

    public ReportesGenerador() {
        this.pdfGenerador = new PdfGenerador();
        this.csvGenerador = new CsvGenerador();

    }

       public void generarPdf() {
        pdfGenerador.exportar();
    }

    public void generarCsv() {
        csvGenerador.exportar();
    }

    ESTO TRAE UN PROBLEMA DE ACOPLAR CLASES A UNA CLASE DE ALTO NIVEL CON METODOS PARA EJECUTAR DIFERENTES CLASES
    Y SE DARA OTRO PROBLEMA CUANDO SE QUIERA AGREGAR UNA NUEVA CLASE DE GENERACION DE ARCHIVOS, COMO GENERADOR DE EXCEL
    Y POR CADA NUEVA DEPENDENCIA, SE TENDRA QUE AGREGAR COMO ATRIBUTO EN EL CONSTUCTOR Y ADEMAS SE TENDRA QUE LLAMAR AL METODO EN CONCRETO DE LA CLASE
    NO DELEGANDO LA LOGICA A LAS CLASES HIJAS, YA QUE LAS CLASES PADRES DEBEN CONTROLAR A LAS HIJAS POR LOS METODOS
    */

}

/*
Clase de alto nivel, YA QUE ES EL ENCARGADO DE ADMINISTRAR LAS DEMAS CLASES

ESTAS EN VEZ DE ESTAR DEPENDIENTES DE OTRAS CLASES, DEBEN DEPENDER DE ABSTRACCIONES
EN ESTE CASO, DE UNA INTERFAZ QUE CONTENGA EL METODO EXPORTAR, YA QUE ES EL PATRON COMUN
DE ESA FORMA SE DELEGA DEPENDENCIA A UNA INTERFAZ Y NO A UNA CLASE CONCRETA

INYECTANDOSE ESA INTERFAZ EN EL CONSTRUCTOR DE LA CLASE, YA NO HACIENDO FALTA TENER DOS METODOS DE FORMA DIFEERENTE
SOLAMENTE SE NECESITA UN METODO QUE RECIBA UNA INTERFAZ Y EJECUTE EL METODO EXPORTAR DE ESA INTERFAZ

DE ESTA FORMA LA CLASE DE ALTA NIVEL NO TIENE IDEA DE LAS CLASES, DE COMO FUNCIONAN LAS DE BAJO NIVEL
SOLO LE INTERESA LA INTERFAZ COMO ABSTRACCION Y SU METODO
CUMPLIENDO QUE LAS ABSTRACCIONES NO DEPENDAN DE LOS DETALLES, SI NO LOS DETALLES DE LAS ABSTRACCIONES

 */
